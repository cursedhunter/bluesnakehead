#jinja2:1strip_blocks: True
tenant_name,tenant_mac_vrf_base_vni,ip_vrf_name,ip_vrf_vni,vrf_diagnostic_loopback_number,vrf_diagnostic_loopback_i
p_range
TENANT_A,10000,TEST_VRF,10,100,10.255.1.0/24

{% for tenant in tenants %}
{{tenant}},{{tenant.mac_vrf_vni_base}},

{{host}},{{hostvars[host].type}},{{ hostvars[host].ansible_host}}/24,cEOS,0c:1d:c0:1d:{{mac[2]}}:{{mac[3]}}
{% endfor %}

tenants:
  Cust_A:
    mac_vrf_vni_base: 10000
    enable_mlag_ibgp_peering_vrfs: true
    vrfs:
      Cust_A_VRF:
        vrf_vni: 100
        svis:
          100:
            name: Cust_A_Data
            description: optional for svi instead of vlan name
            tags: [Cust_A_opzone]
            enabled: true
            ip_address_virtual: 10.0.10.1/24
            ip_helpers: [10.0.10.10, 10.1.10.10]
            igmp_snooping_enabled: true
            vxlan: true
          167:
            name: Cust_A_M2C2
            tags: [Cust_A_opzone]
            ip_address_virtual: 10.1.11.1/24
            ip_helpers:
              - 10.1.11.10
          "133":
            name: Cust_A_OP_M2
            tags: [Cust_A_opzone]
            enabled: true
            ip_address_virtual: 10.1.12.1/24
            ip_helpers:
              - 10.1.12.10
            vxlan: true
    l2vlans:
      "666":
        name: bitbucket
        tags: [bitbucket]
        vxlan: False
      "999":
        name: vmotion
        tags: [vmotion]
        vxlan: False      
  Cust_B:
    mac_vrf_vni_base: 20000
    enable_mlag_ibgp_peering_vrfs: true
    vrfs:
      Cust_B_VRF:
        vrf_vni: 200
        svis:
          "200":
            name: Cust_B_Data
            tags: [Cust_B_opzone]
            enabled: true
            ip_address_virtual: 10.32.1.1/24
            ip_helpers:
              - 10.32.1.10
            structured_config:
              description: set from structured_config on svi (was Cust_B_OP_Zone_1) 
          "267":
#            vni_override: 50211
            name: Cust_B_M2C2
            tags: [Cust_B_opzone]
            ip_address_virtual: 10.32.11.1/24
            ip_helpers:
              - 10.32.11.10
          "233":
#            vni_override: 50212
            name: Cust_B_M2
            tags: [Cust_B_opzone]
            enabled: true
            ip_address_virtual: 10.32.12.1/24
            ip_helpers:
              - 10.32.12.10
#    l2vlans:
#      "2520":
#        vni_override: 2500
#        name: web-l2-vlan
#        tags: [web]
        # List of L3 interfaces | Optional.
        # This will create IP routed interface inside VRF. Length of interfaces, nodes and ip_addresses must match.
#    l3_interfaces:
#      - interfaces: [ Vlan67, Vlan211 ]
#        ip_addresses: [ 10.32.1.1/24, 10.32.11.1/24 ]
#        nodes: [ DC2-POD1-LEAF4A, DC2-POD1-LEAF4B ]
#        description: UnderCustBVRFL3_Interfaces
#        enabled: true
#        mtu: 9000
        # EOS CLI rendered directly on the Ethernet interface in the final EOS configuration
#        raw_eos_cli: |
#          < multiline eos cli >
        # Custom structured config added under ethernet_interfaces.<interface> for eos_cli_config_gen
#        structured_config: < dictionary >

          # For sub-interfaces the dot1q vlan is derived from the interface name by default, but can also be specified.
#      - interfaces: [ <interface_name1.sub-if-id>, <interface_name2.sub-if-id> ]
#        encapsulation_dot1q_vlan: [ <vlan id>, <vlan id> ]
#        ip_addresses: [ <IPv4_address/Mask>, <IPv4_address/Mask> ]
#        nodes: [ < node_1 >, < node_2 > ]
#        description: < description >
#        enabled: < true | false >
#        mtu: < mtu - should only be used for platforms supporting mtu per subinterface >

        # Dictionary of static routes | Optional.
        # This will create static routes inside the tenant VRF.
        # If nodes are not specified, all l3leafs that carry the VRF will also be applied the static routes.
        # If a node has a static route in the VRF, redistribute static will be automatically enabled in that VRF.
        # This automatic behavior can be overridden non-selectively with the redistribute_static knob for the VRF.
#    static_routes:
#      - destination_address_prefix: < IPv4_address/Mask >
#        gateway: < IPv4_address >
#        distance: < 1-255 >
#        tag: < 0-4294967295 >
#        name: < description >
#        metric: < 0-4294967295 >
#        interface: < interface >
#        nodes: [ < node_1 >, < node_2 >]

        # Non-selectively enabling or disabling redistribute static inside the VRF | Optional.
#        redistribute_static: < true | false >
